generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  SCHEDULED
  LIVE
  IN_PLAY
  PAUSED
  FINISHED
  POSTPONED
  SUSPENDED
  CANCELED
}

enum scoreType {
  FULL_TIME
  HALF_TIME
  EXTRA_TIME
  PENALTIES
}

enum winner {
  HOME_TEAM
  AWAY_TEAM
  DRAW
}

model Competition {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  emblemUrl       String
  code            String      @unique
  teamIds         Int[]
  teams           Team[]      @relation(fields: [teamIds], references: [id])
  currentSeasonId Int         @unique
  currentSeason   Season      @relation("competition_currentSeason", fields: [currentSeasonId], references: [id])
  pastSeasons     Season[]    @relation("competition_pastSeasons")
  matches         Match[]
  standings       Standings[]

  @@map("competitions")
}

model Season {
  id                Int          @id @default(autoincrement())
  startDate         DateTime     @db.Timestamptz(6)
  endDate           DateTime     @db.Timestamptz(6)
  currentMatchday   Int?
  winnerId          Int?
  winner            Team?        @relation(fields: [winnerId], references: [id])
  competition       Competition? @relation("competition_currentSeason")
  pastCompetitionId Int?
  pastCompetition   Competition? @relation("competition_pastSeasons", fields: [pastCompetitionId], references: [id])
  standings         Standings[]

  @@map("seasons")
}

model Match {
  id            Int         @id @default(autoincrement())
  date          DateTime    @db.Timestamptz(6)
  homeTeamId    Int
  homeTeam      Team        @relation("matches_homeTeamIdToteams", fields: [homeTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_homeTeam_id")
  awayTeam      Team        @relation("matches_awayTeamIdToteams", fields: [awayTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_awayTeam_id")
  awayTeamId    Int
  status        status
  matchday      Int
  winner        winner?
  homeTeamScore Int?
  awayTeamScore Int?
  duration      scoreType?
  competitionId Int
  competition   Competition @relation(fields: [competitionId], references: [id])
  betInfo       BetInfo?

  @@map("matches")
}

model Team {
  id                Int           @id(map: "teamss_pkey") @default(autoincrement())
  name              String        @unique
  crestUrl          String?
  matchesAsAwayTeam Match[]       @relation("matches_awayTeamIdToteams")
  matchesAsHomeTeam Match[]       @relation("matches_homeTeamIdToteams")
  competitions      Competition[]
  wonSeasons        Season[]
  standingEntries   Standings[]

  @@map("teams")
}

// standing entries for each team & competition combination
model Standings {
  id            Int         @id(map: "standings_pkey") @default(autoincrement())
  teamId        Int
  team          Team        @relation(fields: [teamId], references: [id])
  playedGames   Int
  won           Int
  draw          Int
  lost          Int
  points        Int
  goalsFor      Int
  goalsAgainst  Int
  competitionId Int
  competition   Competition @relation(fields: [competitionId], references: [id])
  seasonId      Int
  season        Season      @relation(fields: [seasonId], references: [id])

  @@map("standings")
}

// entries containing the status of the bets for each match
model BetInfo {
  id                      Int     @id(map: "betInfos_pkey") @default(autoincrement())
  matchId                 Int     @unique
  match                   Match   @relation(fields: [matchId], references: [id])
  opened                  Boolean
  finished                Boolean
  bets                    Bet[]
  resultHomeTeamOdd       Float
  resultDrawOdd           Float
  resultAwayTeamOdd       Float
  resultHomeTeamOrDrawOdd Float
  resultAwayTeamOrDrawOdd Float
  goalsHomeTeamOdds       Float[]
  goalsAwayTeamOdds       Float[]

  @@map("betInfos")
}

enum betType {
  RESULT_HOME_TEAM
  RESULT_AWAY_TEAM
  RESULT_HOME_TEAM_OR_DRAW
  RESULT_AWAY_TEAM_OR_DRAW
  RESULT_DRAW
  GOALS_HOME_TEAM
  GOALS_AWAY_TEAM
}

// entries containing bets made by users
model Bet {
  id        Int     @id(map: "bets_pkey") @default(autoincrement())
  betInfoId Int
  betInfo   BetInfo @relation(fields: [betInfoId], references: [id])
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  type      betType
  amount    Int
  goals     Int?

  @@map("bets")
}

// accounts
model User {
  id       Int     @id(map: "users_pkey") @default(autoincrement())
  uid      String  @unique
  email    String  @unique
  photoUrl String?
  name     String?
  bets     Bet[]
  balance  Float

  @@map("users")
}
